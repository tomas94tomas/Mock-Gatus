name: configure-and-deploy
on:
  push:
    paths:
      - "ansible/**"
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:         ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID:     ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_OIDC_ROLE_NAME: ${{ secrets.AWS_OIDC_ROLE_NAME }}

jobs:
  ansible:
    runs-on: ubuntu-latest
    env:
      # Use the singular form to avoid deprecation warnings.
      ANSIBLE_COLLECTIONS_PATH: /var/lib/awx/ansible/collections:/home/runner/.ansible/collections:/usr/share/ansible/collections
      # Optional but handy: point Ansible at your repo cfg
      ANSIBLE_CONFIG: ${{ github.workspace }}/ansible/ansible.cfg
      # Ensure we pick up binaries from the venv when PATH is exported
      AWX_VENV_BIN: /var/lib/awx/ansible/bin

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      - name: Ensure inventory folder
        run: mkdir -p ansible/inventories

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_OIDC_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 instance id from Terraform outputs
        id: tf
        working-directory: terraform
        run: |
          terraform init -backend-config='bucket=${{ secrets.AWS_TFSTATE_BUCKET }}' \
                         -backend-config='key=teraform/devops-project-terraform-state-2025/terraform.tfstate' \
                         -backend-config='region=${{ secrets.AWS_REGION }}' \
                         -backend-config='encrypt=true'
          terraform output -raw instance_id > ../ansible/inventories/instance_id

      # --- AWX-style virtualenv at /var/lib/awx/ansible ---
      - name: Create /var/lib/awx/ansible virtualenv
        run: |
          set -e
          sudo mkdir -p /var/lib/awx/ansible
          sudo python3 -m venv /var/lib/awx/ansible
          sudo chown -R "$(id -u)":"$(id -g)" /var/lib/awx/ansible

      - name: Install Ansible (in venv) and AWS Python deps
        run: |
          set -e
          "${AWX_VENV_BIN}/python" -m pip install --upgrade pip
          "${AWX_VENV_BIN}/pip" install 'ansible>=9' boto3 botocore

      - name: Install AWS collections into /var/lib/awx/ansible/collections
        run: |
          set -e
          # Ensure collections directory exists and is writable
          sudo mkdir -p /var/lib/awx/ansible/collections
          sudo chown -R "$(id -u)":"$(id -g)" /var/lib/awx/ansible/collections
          # Install collections as per requirements.yml to the AWX venv path
          "${AWX_VENV_BIN}/ansible-galaxy" collection install \
            -r ansible/requirements.yml \
            -p /var/lib/awx/ansible/collections

      - name: Verify environment & SSM connection plugin
        run: |
          set -e
          export PATH="${AWX_VENV_BIN}:$PATH"
          echo "Using ansible from: $(which ansible)"
          ansible --version
          echo "ANSIBLE_COLLECTIONS_PATH=${ANSIBLE_COLLECTIONS_PATH}"
          # Dump effective config and show collections paths
          "${AWX_VENV_BIN}/ansible-config" dump | grep -i collections_path || true
          echo "== Connection plugins available =="
          "${AWX_VENV_BIN}/ansible-doc" -t connection -l | grep -E '^amazon\.aws\.aws_ssm\s' || (echo "aws_ssm plugin not found" && exit 1)

      - name: Create inventory using SSM connection
        working-directory: ansible
        run: |
          set -e
          IID=$(cat inventories/instance_id)
          cat > inventories/hosts.ini <<EOF
          [aws]
          ${IID} ansible_connection=aws_ssm ansible_aws_ssm_region=${{ env.AWS_REGION }} ansible_user=root ansible_aws_ssm_run_as_user=root ansible_aws_ssm_execution_timeout=3600
          EOF
          echo "Inventory:"
          cat inventories/hosts.ini

      - name: Run playbook (prepare VM + deploy Gatus)
        working-directory: ansible
        run: |
          set -e
          export PATH="${AWX_VENV_BIN}:$PATH"
          ansible --version
          ansible-playbook site.yml -vv
