name: configure-and-deploy

on:
  push:
    paths:
      - "ansible/**"
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

concurrency:
  group: configure-and-deploy
  cancel-in-progress: false

env:
  AWS_REGION:         ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID:     ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_OIDC_ROLE_NAME: ${{ secrets.AWS_OIDC_ROLE_NAME }}

jobs:
  ansible:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Terraform is only used to read outputs (instance_id)
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Ensure inventory folder
        run: mkdir -p ansible/inventories

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_OIDC_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      # Reads instance_id from the remote state defined in terraform/backend.tf
      - name: Get EC2 instance id from Terraform outputs
        id: tf
        working-directory: terraform
        run: |
          terraform init -reconfigure
          terraform output -raw instance_id > ../ansible/inventories/instance_id
          echo "IID=$(cat ../ansible/inventories/instance_id)" >> $GITHUB_ENV

      - name: Wait for SSM availability
        run: |
          for i in {1..30}; do
            STATUS=$(aws ssm describe-instance-information \
              --filters "Key=InstanceIds,Values=${IID}" \
              --query "InstanceInformationList[0].PingStatus" --output text 2>/dev/null || true)
            if [ "$STATUS" = "Online" ]; then
              echo "SSM is Online for ${IID}"
              exit 0
            fi
            echo "Waiting for SSM... attempt $i/30 (status: $STATUS)"
            sleep 10
          done
          echo "SSM never became online for ${IID}" >&2
          exit 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Ansible + AWS collections
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore
          # install both collections to avoid redirects/warnings
          cat > ansible/requirements.yml <<'REQ'
          ---
          collections:
            - name: amazon.aws
            - name: community.aws
          REQ
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Create inventory (SSM connection)
        working-directory: ansible
        run: |
          cat > inventories/hosts.ini <<EOF
          [aws]
          ${IID} ansible_connection=amazon.aws.aws_ssm ansible_aws_ssm_region=${{ env.AWS_REGION }} ansible_aws_ssm_run_as_user=root ansible_aws_ssm_execution_timeout=3600
          EOF
          echo "Inventory:"
          cat inventories/hosts.ini

      - name: Run playbook (prepare VM + deploy Gatus)
        working-directory: ansible
        run: |
          ansible --version
          ansible-playbook site.yml -vv
